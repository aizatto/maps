{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["google","window","App","ref","useRef","textareaRef","latRef","lngRef","useState","latLng","setLatLng","details","setDetails","useEffect","input","current","autocomplete","maps","places","Autocomplete","fields","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","addListener","place","getPlace","geometry","location","value","toString","name","formatted_address","url","textarea","style","height","scrollHeight","googleMaps","Button","href","className","Container","InputGroup","Input","type","innerRef","InputGroupAddon","addonType","onClick","placeholder","readOnly","resize","copy","process","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6199346f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Container, Input, Button, InputGroup, InputGroupAddon } from 'reactstrap';\nimport copy from 'copy-to-clipboard';\n\nconst google = window.google;\n\nconst App: React.FC = () => {\n  const ref = useRef<HTMLInputElement | null>(null);\n  const textareaRef = useRef<HTMLInputElement | null>(null);\n  const latRef = useRef<HTMLInputElement | null>(null);\n  const lngRef = useRef<HTMLInputElement | null>(null);\n  const [latLng, setLatLng] = useState<{lat: number, lng: number}>();\n  const [details, setDetails] = useState('Details');\n\n  useEffect(() => {\n    const input = ref.current;\n    if (!input) {\n      return;\n    }\n    const options = {\n      fields: ['name', 'formatted_address', 'geometry.location', 'url', 'place_id'],\n    };\n\n    const autocomplete = new google.maps.places.Autocomplete(input, options);\n    // const placesService = new google.maps.places.PlacesService(input);\n\n    navigator.geolocation.getCurrentPosition((position) =>  {\n      var geolocation = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n      var circle = new google.maps.Circle(\n        {\n          center: geolocation,\n          radius: position.coords.accuracy,\n        },\n      );\n      autocomplete.setBounds(circle.getBounds());\n    });\n\n    autocomplete.addListener('place_changed', () => {\n      const place = autocomplete.getPlace();\n      const geometry = place.geometry;\n      if (!geometry) {\n        return;\n      }\n\n      const location = geometry.location;\n      if (!location) {\n        return;\n      }\n\n      if (latRef.current) {\n        latRef.current.value = location.lat().toString()\n      }\n      if (lngRef.current) {\n        lngRef.current.value = location.lng().toString()\n      }\n      setLatLng({\n        lat: location.lat(),\n        lng: location.lng(),\n      });\n\n      setDetails(`${place.name}\\n${place.formatted_address}\\n${place.url}`);\n      if (textareaRef.current) {\n        const textarea = textareaRef.current;\n        textarea.style.height = `${textarea.scrollHeight}px`;\n      }\n\n      // if (!place.place_id) {\n      //   return;\n      // }\n\n      // placesService.getDetails(\n      //   {\n      //     placeId: place.place_id,\n      //     fields: ['url'],\n      //   },\n      //   (details) => {\n      //   }\n      // )\n    });\n  }, []);\n\n  const googleMaps = latLng\n    ? \n      <Button href={`https://www.google.com/maps/?q=${latLng.lat},${latLng.lng}`}>\n        Open Google Maps\n      </Button>\n    : null;\n\n  return (\n    <div className=\"App\">\n      <Container className=\"mt-2\">\n        <InputGroup className=\"mb-1\">\n          <Input\n            type=\"text\"\n            innerRef={ref}\n          />\n          <InputGroupAddon addonType=\"append\">\n            <Button\n              onClick={() => {\n                if (!ref.current) {\n                  return;\n                }\n                ref.current.value = '';\n              }}\n              >\n              Clear\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n\n        <Input\n          innerRef={latRef}\n          placeholder=\"lat\"\n          readOnly\n          className=\"mb-1\"\n        />\n\n        <Input\n          innerRef={lngRef}\n          placeholder=\"lat\"\n          readOnly\n          className=\"mb-1\"\n        />\n\n        <InputGroup>\n          <Input\n            type=\"textarea\"\n            value={details}\n            innerRef={textareaRef}\n            style={{resize: 'none'}}\n            readOnly\n          />\n          <InputGroupAddon addonType=\"append\">\n            <Button\n              onClick={() => {\n                if (!textareaRef.current) {\n                  return;\n                }\n                copy(textareaRef.current.value);\n              }}\n              >\n              Copy\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n\n        {googleMaps}\n\n        <h1>Documentation</h1>\n\n        <ul>\n          <li>\n            <a href=\"https://developers.google.com/maps/documentation/javascript/places-autocomplete\">\n              Places Autocomplete\n            </a>\n          </li>\n          <li>\n            <a href=\"https://developers.google.com/maps/documentation/javascript/reference/places-widget\">\n              API Reference\n            </a>\n          </li>\n          <li>\n            <a href=\"https://developers.google.com/places/web-service/usage-and-billing\">\n              Usage and Billing\n            </a>\n          </li>\n        </ul>\n        Google Cloud Platform:\n        <ul>\n          <li>\n            <a href={`https://console.cloud.google.com/apis/credentials?supportedpurview=project&project=${process.env.REACT_APP_PROJECT}`}>\n              API Credentials\n            </a>\n          </li>\n          <li>\n            <a href={`https://console.cloud.google.com/google/maps-apis/apis/maps-backend.googleapis.com/metrics?supportedpurview=project&project=${process.env.REACT_APP_PROJECT}`}>\n              Manage Maps JavaScript API\n            </a>\n          </li>\n          <li>\n            <a href={`https://console.cloud.google.com/google/maps-apis/apis/places-backend.googleapis.com/metrics?supportedpurview=project&project=${process.env.REACT_APP_PROJECT}`}>\n              Manage Places API\n            </a>\n          </li>\n          <li>\n            <a href={`https://console.cloud.google.com/billing/linkedaccount?supportedpurview=project&project=${process.env.REACT_APP_PROJECT}`}>\n              Billing\n            </a>\n          </li>\n        </ul>\n        Error Messages:\n        <ul>\n          <li>\n            <a href=\"https://developers.google.com/maps/documentation/javascript/error-messages#api-not-activated-map-error\">\n              Google Maps JavaScript API error: ApiNotActivatedMapError\n            </a>\n          </li>\n          <li>\n            <p>\n              You have exceeded your daily request quota for this API. If you did not set a custom daily request quota, verify your project has an active billing account: <a href=\"http://g.co/dev/maps-no-account \">http://g.co/dev/maps-no-account</a>\n            </p>\n            <p>\n              For more information on usage limits and the Google Maps JavaScript API services please see: <a href=\"https://developers.google.com/maps/documentation/javascript/usage\">https://developers.google.com/maps/documentation/javascript/usage</a>\n            </p>\n          </li>\n        </ul>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}